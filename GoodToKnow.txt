// Can be done like this as well 'dynamic'

          //          dynamic {
          //            onComplete( (repoActor ? ReadQuoteNames).mapTo[List[String]] ) {
          //              case Success(listOfQuotes) => { log.debug("quotes: " + listOfQuotes); complete(Quotes(listOfQuotes)) }
          //              case Failure(error) => failWith(error)
          //            }
          //          }




          package de.matsluni.singlepage

          import akka.camel.CamelMessage
          import de.matsluni.singlepage.integration.{QuoteDataParser, QuoteDataProducer}
          import akka.actor.{Actor, ActorSystem, Props, ActorRef}

          /**
           * Created with IntelliJ IDEA.
           * User: matze
           * Date: 12.09.13
           * Time: 18:36
           * To change this template use File | Settings | File Templates.
           */
          class Main extends App {

            class SimpleActor extends Actor {
              override def receive = {
                case x => println(x)
              }
            }


            // we need an ActorSystem to host our application in
            val system = ActorSystem("test-system")
            val simpleActor = system.actorOf(Props[SimpleActor], "targetActor")
            val stockDataParser = system.actorOf(Props(new QuoteDataParser()), "stockDataParser")
            val dataActor = system.actorOf(QuoteDataProducer.props(), "dataprovider")

            dataActor ! CamelMessage("AAPL",Map.empty)
          }


// can be tested with curl -v -H "Content-Type: application/json" -X GET --data '{"name":"AAPL"}' "http://localhost:8080/api/fullQuotes"

http://jsfiddle.net/gh/get/jquery/1.7.2/highslide-software/highcharts.com/tree/master/samples/highcharts/global/useutc-false/

$(function () {
    Highcharts.setOptions({
        global: {
            useUTC: false
        }
    });

    $('#container').highcharts({
        chart: {
        },

        xAxis: {
            type: 'datetime'
        },

        series: [{
            data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4],
            pointStart: Date.UTC(2010, 0, 1),
            pointInterval: 3600 * 1000 // one hour
        }]
    });
});